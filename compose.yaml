services:
  mysql:
    image: mysql:8.0
    container_name: ds-mysql
    volumes:
      - ./storage/mysql:/var/lib/mysql
    ports:
      - "${MYSQL_PORT}:${MYSQL_PORT}"
    env_file:
      - .env
    networks:
      - network

  minio:
    hostname: minio
    image: "minio/minio"
    container_name: lake-minio
    ports:
      - "${MINIO_CONSOLE_PORT}:${MINIO_CONSOLE_PORT}"
      - "${MINIO_API_PORT}:${MINIO_API_PORT}"
    command: ["server", "/data", "--console-address", ":${MINIO_CONSOLE_PORT}"]
    volumes:
      - ./storage/minio:/data
    env_file:
      - .env
    networks:
      - network

  mc:
    image: minio/mc
    container_name: mc
    hostname: mc
    env_file:
      - .env
    entrypoint: >
      /bin/sh -c " until (/usr/bin/mc config host add minio
      http://${MINIO_ENDPOINT} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}) do echo '...waiting...' && sleep 1;
      done; /usr/bin/mc mb minio/${MINIO_DATALAKE_BUCKET}; /usr/bin/mc policy set public
      minio/${MINIO_DATALAKE_BUCKET}; exit 0; "
    depends_on:
      - minio
    networks:
      - network

  clickhouse:
    image: clickhouse/clickhouse-server:24.9
    container_name: dw-clickhouse
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: ${CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT}
      CLICKHOUSE_TCP_PORT: ${CLICKHOUSE_TCP_PORT}
      CLICKHOUSE_HTTP_PORT: ${CLICKHOUSE_HTTP_PORT}
    ports:
      - ${CLICKHOUSE_HTTP_PORT}:${CLICKHOUSE_HTTP_PORT} # For Clickhouse Web UI
    expose:
      - ${CLICKHOUSE_TCP_PORT}
    volumes:
      - ./storage/clickhouse:/var/lib/clickhouse
      - ./storage/clickhouse-logs:/var/log/clickhouse-server/
      - ./clickhouse/config.d/config.xml:/etc/clickhouse-server/config.d/config.xml
      - ./clickhouse/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    networks:
      - network

  metabase:
    build:
      context: ./metabase
    image: metabase-clickhouse:latest
    container_name: metabase
    ports:
      - "${MB_UI_PORT}:3000"
    volumes:
      - ./storage/metabase:/metabase.db
    networks:
      - network


networks:
  network:
    driver: bridge
    name: network
    external: true
